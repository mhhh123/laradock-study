<?php
// +----------------------------------------------------------------------
// | User: zq
// +----------------------------------------------------------------------
// | Time: 2021/12/17 10:18
// +----------------------------------------------------------------------

namespace Tests\Http\Controllers\Wx;

use App\Models\Goods\GoodsProduct;
use App\Models\Test\Test1;
use App\Models\User\User;
use App\Services\Goods\GoodsService;
use App\Services\Order\CartService;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;


class CartControllerTest extends TestCase
{
    use DatabaseTransactions;

    /** @var User */
    protected $user;
    /** @var GoodsProduct */
    private $product;

    private $authHeader;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
        // 货品对象
        $this->product = factory(GoodsProduct::class)->create([
            'number' => 10
        ]);

        $this->authHeader = $this->getAuthHeader($this->user->username, '123456');
    }

    public function testIndex()
    {
        $this->post('wx/cart/add', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 2
        ], $this->authHeader);

        $resp = $this->get('wx/cart/index', [], $this->authHeader);
        $resp->assertJson([
            "errno" => 0, "errmsg" => "成功", "data" => [
                "cartList" => [
                    [
                        'goodsId' => $this->product->goods_id,
                        'productId' => $this->product->id
                    ]
                ],
                "cartTotal" => [
                    "goodsCount" => 2,
                    "goodsAmount" => 1998.00,
                    "checkedGoodsCount" => 2,
                    "checkedGoodsAmount" => 1998.00
                ]
            ]
        ]);

        $goods = GoodsService::getInstance()->getGoods($this->product->goods_id);
        $goods->is_on_sale = false;
        $goods->save();

        $resp = $this->get('wx/cart/index', [], $this->authHeader);
        $resp->assertJson([
            "errno" => 0, "errmsg" => "成功", "data" => [
                "cartList" => [],
                "cartTotal" => [
                    "goodsCount" => 0,
                    "goodsAmount" => 0,
                    "checkedGoodsCount" => 0,
                    "checkedGoodsAmount" => 0
                ]
            ]
        ]);

        $cart = CartService::getInstance()->getCartProduct($this->user->id, $this->product->goods_id,
            $this->product->id);
        $this->assertNull($cart);
    }

    public function testFastadd()
    {
        $resp = $this->post('wx/cart/add', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 2
        ], $this->authHeader);
        $resp->assertJson(["errno" => 0, "errmsg" => "成功", "data" => "2"]);

        $resp = $this->post('wx/cart/fastadd', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 5
        ], $this->authHeader);

        $cart = CartService::getInstance()->getCartProduct($this->user->id, $this->product->goods_id,
            $this->product->id);
        $this->assertEquals(5, $cart->number);

        $resp->assertJson(["errno" => 0, "errmsg" => "成功", 'data' => $cart->id]);

    }

    public function testAdd()
    {
        $resp = $this->post('wx/cart/add', [
            'goodsId' => 0,
            'productId' => 0,
            'number' => 1
        ], $this->authHeader);
        $resp->assertJson(["errno" => 402, "errmsg" => "参数值不对"]);

        $resp = $this->post('wx/cart/add', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 11
        ], $this->authHeader);
        $resp->assertJson(["errno" => 711, "errmsg" => "库存不足"]);

        $resp = $this->post('wx/cart/add', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 2
        ], $this->authHeader);
        $resp->assertJson(["errno" => 0, "errmsg" => "成功", "data" => "2"]);

        $resp = $this->post('wx/cart/add', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 3
        ], $this->authHeader);
        $resp->assertJson(["errno" => 0, "errmsg" => "成功", "data" => "5"]);

        $cart = CartService::getInstance()->getCartProduct($this->user->id, $this->product->goods_id,
            $this->product->id);
        $this->assertEquals(5, $cart->number);

        $resp = $this->post('wx/cart/add', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 6
        ], $this->authHeader);
        $resp->assertJson(["errno" => 711, "errmsg" => "库存不足"]);
    }

    public function testUpdate()
    {
        $resp = $this->post('wx/cart/add', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 2
        ], $this->authHeader);
        $resp->assertJson(["errno" => 0, "errmsg" => "成功", "data" => "2"]);

        // 获取购物车
        $cart = CartService::getInstance()->getCartProduct($this->user->id, $this->product->goods_id,
            $this->product->id);

        $resp = $this->post('wx/cart/update', [
            'id' => $cart->id,
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 6
        ], $this->authHeader);
        $resp->assertJson(["errno" => 0, "errmsg" => "成功"]);

        $resp = $this->post('wx/cart/update', [
            'id' => $cart->id,
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 11
        ], $this->authHeader);
        $resp->assertJson(["errno" => 711, "errmsg" => "库存不足"]);

        $resp = $this->post('wx/cart/update', [
            'id' => $cart->id,
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 0
        ], $this->authHeader);
        $resp->assertJson(["errno" => 402]);
    }

    public function testDelete()
    {
        $resp = $this->post('wx/cart/add', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 2
        ], $this->authHeader);
        $resp->assertJson(["errno" => 0, "errmsg" => "成功", "data" => "2"]);

        $cart = CartService::getInstance()->getCartProduct($this->user->id, $this->product->goods_id,
            $this->product->id);
        $this->assertNotNull($cart);

        $resp = $this->post('wx/cart/delete', [
            'productIds' => [$this->product->id],
        ], $this->authHeader);

        $cart = CartService::getInstance()->getCartProduct($this->user->id, $this->product->goods_id,
            $this->product->id);
        $this->assertNull($cart);

        $resp = $this->post('wx/cart/delete', [
            'productIds' => [],
        ], $this->authHeader);
        $resp->assertJson(["errno" => 402, "errmsg" => "参数值不对"]);
    }

    public function testChecked()
    {
        $resp = $this->post('wx/cart/add', [
            'goodsId' => $this->product->goods_id,
            'productId' => $this->product->id,
            'number' => 2
        ], $this->authHeader);
        $resp->assertJson(["errno" => 0, "errmsg" => "成功", "data" => "2"]);

        $cart = CartService::getInstance()->getCartProduct($this->user->id, $this->product->goods_id,
            $this->product->id);
        $this->assertTrue($cart->checked);

        $resp = $this->post('wx/cart/checked', [
            'productIds' => [$this->product->id],
            'isChecked' => 0
        ], $this->authHeader);

        $cart = CartService::getInstance()->getCartProduct($this->user->id, $this->product->goods_id,
            $this->product->id);
        $this->assertFalse($cart->checked);

        $resp = $this->post('wx/cart/checked', [
            'productIds' => [$this->product->id],
            'isChecked' => 1
        ], $this->authHeader);

        $cart = CartService::getInstance()->getCartProduct($this->user->id, $this->product->goods_id,
            $this->product->id);
        $this->assertTrue($cart->checked);
    }

    public function testCheckout()
    {
        $this->assertLitemallApi('wx/cart/checkout');
    }

}