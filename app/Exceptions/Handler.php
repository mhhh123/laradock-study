<?php

namespace App\Exceptions;

use App\CodeResponse;
use Dotenv\Exception\ValidationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Request;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];
    /**
     * @var array
     */
    protected $dontReport=[
        BusinessException::class
    ];

    /**
     * @param Throwable $e
     * @return void
     * @throws Throwable
     */
    public function report(Throwable $e)
    {
        parent::report($e); // TODO: Change the autogenerated stub
    }

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    /**
     * @param Request $request
     * @param Throwable $e
     * @return \Illuminate\Http\JsonResponse|\Illuminate\Http\RedirectResponse|\Illuminate\Http\Response|\Symfony\Component\HttpFoundation\Response
     * @throws Throwable
     *
     */
    public function render($request, Throwable $e)
    {   if($e instanceof ValidationException){
        return  response()->json([
            'errno'=>CodeResponse::PARAM_ILLEGAL[0],
            'errmsg'=>CodeResponse::PARAM_ILLEGAL[1],
        ]);
    }
        if($e instanceof BusinessException){
            return response()->json([
                'errno'=>$e->getCode(),
                'errmsg'=>$e->getMessage()
            ]);
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
